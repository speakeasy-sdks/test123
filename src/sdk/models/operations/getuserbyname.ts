/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../../../sdk/models/shared";
import { AxiosResponse } from "axios";

export class GetUserByNameSecurity extends SpeakeasyBase {
    @SpeakeasyMetadata({ data: "security, scheme=true;type=apiKey;subtype=header;name=api_key" })
    apiKey?: string;

    @SpeakeasyMetadata({ data: "security, scheme=true;type=oauth2;name=Authorization" })
    mainAuth?: string;
}

export class GetUserByNameRequest extends SpeakeasyBase {
    /**
     * Pretty print response
     */
    @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=pretty_print" })
    prettyPrint?: boolean;

    /**
     * The name that needs to be fetched
     */
    @SpeakeasyMetadata({ data: "pathParam, style=simple;explode=false;name=username" })
    username: string;

    /**
     * Filter users without email
     */
    @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=with_email" })
    withEmail?: boolean;
}

export class GetUserByNameResponse extends SpeakeasyBase {
    /**
     * HTTP response content type for this operation
     */
    @SpeakeasyMetadata()
    contentType: string;

    /**
     * HTTP response status code for this operation
     */
    @SpeakeasyMetadata()
    statusCode: number;

    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    @SpeakeasyMetadata()
    rawResponse?: AxiosResponse;

    /**
     * Success
     */
    @SpeakeasyMetadata()
    user?: shared.User;
}
